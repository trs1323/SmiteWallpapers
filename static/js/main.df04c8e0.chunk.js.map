{"version":3,"sources":["components/Skin.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Skin","state","window","onpopstate","e","props","goBack","filteredData","Object","keys","this","allSkins","map","obj","i","includes","godName","push","setState","className","to","onClick","god","src","width","alt","href","rel","target","Component","Home","getAllUpdates","Promise","resolve","reject","fetch","then","res","json","filtered","filter","update","real_categories","allUpdates","gods","catch","err","Gods","SkinArr","skinsloaded","sendSlug","x","id","slug","j","temparray","content","split","word","startsWith","length","indexOfFirst","slice","indexOf","indexOfSecond","onlyWord","URLsearchTerm","URLsearchTerm1","URLindexOfFirst","URLindexOfSecond","onlyURL","tempState","error","console","log","setGodName","name","showGodSkins","filterSkinsToGods","god_name_EN","promise","path","replace","card","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df04c8e0.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {\n    BrowserRouter as Router,\n Link\n  } from \"react-router-dom\";\n\nexport default class Skin extends Component {\n    constructor(){\n        super()\n        this.state={\n        \n        }\n    }\n\n    componentDidUpdate(){    \n        window.onpopstate = e => {\n            this.props.goBack()\n        }\n      }\n\n    componentDidMount(){\n        let filteredData = []\n            Object.keys(this.props.allSkins).map((obj, i) => {\n                if(this.props.allSkins[obj][0].includes(this.props.godName)){\n                    filteredData.push(this.props.allSkins[obj])\n                }\n            });\n\n        this.setState({\n            filteredData\n        })\n    }\n\n    render() {\n        return (\n            <Router>\n            <div>\n                <div className=\"skins-header \">\n                    <Link to=\"/\">\n                <h1 className=\"go-back\" onClick={this.props.goBack}>Go Back</h1></Link>\n                <h1 className=\"header\">{this.props.godName}</h1>\n                </div>\n                {this.state.filteredData && <div className=\"skins\">\n                {this.state.filteredData.map((god, i) =>(\n                        <div key={god[0]+i} className='single-skin'>\n                            <div className='single-skin'>\n                        <img src={god[4]} width=\"300\" alt={god[0]}/>\n                        <div className=\"skin-name\">\n                        <p>{god[0]}</p>\n                        </div>\n                        </div>\n                        <div className=\"links\">\n                        <a href={god[1]} rel=\"noreferrer\" target=\"_blank\" >1920x1080</a>\n                        <a href={god[2]} rel=\"noreferrer\" target=\"_blank\">2056x1446</a>\n                        <a href={god[3]} rel=\"noreferrer\" target=\"_blank\">3840x2160</a>\n                        <a href={god[4]} rel=\"noreferrer\" target=\"_blank\">Mobile</a>\n                        </div>\n                        </div>\n              \n                ))}</div>}\n            </div>\n            </Router>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Skin from './Skin';\nimport Gods from './Gods';\nimport SkinArr from './SkinArr';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n  } from \"react-router-dom\";\n\nexport default class Home extends Component {\n    constructor(){\n        super()\n        this.state={\n            allSkins: {},\n            skinsloaded: false,\n            showGodSkins: false,\n            godName: \"\",\n        }\n    }\n\n//return new Promise ((resolve, reject) => {})\n    componentDidMount() {\n        this.promise()\n      }\n\n      getAllUpdates=()=>{\n       return new Promise ((resolve, reject) => {\n        fetch(\"https://cms.smitegame.com/wp-json/smite-api/get-posts/1?tag=update-notes&per_page=10000dasd\")\n          .then(res => res.json())\n          .then(\n            (res) => {\n\n                const filtered = res.filter((update) => update.real_categories.includes('PC'))\n                \n              this.setState({\n                allUpdates: filtered\n              });\n\n              fetch(\"https://cms.smitegame.com/wp-json/smite-api/all-gods/1?\")\n              .then(res => res.json())\n              .then(\n                  (res) => {\n                    this.setState({\n                      gods: res\n                    });\n                    resolve()\n                  }  \n              )\n              \n            }\n          )\n          .catch((err)=>{\n            this.setState({\n                gods: Gods,\n                allSkins: SkinArr,\n                skinsloaded: true\n              })\n          })\n       \n        })\n      }\n\n      \n      //gets the update url and recives the update info from the url given\n    sendSlug = () =>{\n        return new Promise ((resolve, reject) => {   \n        for(let x = 0; x<this.state.allUpdates.length; x++){\n\n        if(this.state.allUpdates[x].real_categories.includes('PC')){\n\n            if(this.state.allUpdates[x].id === 15808){ continue }else{\n        fetch(`https://cms.smitegame.com/wp-json/smite-api/get-post/1?slug=${this.state.allUpdates[x].slug}`)\n          .then(res => res.json())\n          .then(\n            (res) => {\n                var splitt = res.content.split('\\n');\n\n            //filters only the skins in the content\n            var filtered = splitt.filter(word => word.startsWith('<li><a href=') || word.startsWith('<p class=\\\"name\\\">') || word.startsWith('<h3>')|| word.startsWith('<h5>Recolor ') || word.startsWith(\"<h5>Shadows Over Hercopolis</h5>\") || word.startsWith(\"<h5>Legend of the Foxes</h5>\"))\n            \n            //deletes the non skins links\n            filtered = filtered.filter(word => word !== \"<h5>Recolor &#8211; Shogun Hachiman</h5>\" && word!== \"<h5>Recolor &#8211; Red Rum Baron Samedi</h5>\" && word !== \"<h5>Recolor &#8211; Myrmidon Achilles</h5>\" && word !== '<li><a href=\"https://www.smitegame.com/news/8-6-bonus-update-notes-live-june-29/\">More details here</a>!</li>' && word !== '<li><a href=\"https://www.smitegame.com/news/8-8-bonus-update-notes-live-september-7th/\">More details here!</a></li>')\n   \n        \n            var i,j,temparray,chunk = 5;\n            for (i=0,j=filtered.length; i<j; i+=chunk) {\n                temparray = filtered.slice(i,i+chunk);\n\n                //grabs name\n                const searchTerm = '>';\n                const searchTerm1 = '<';\n                let indexOfFirst = temparray[0].indexOf(searchTerm,1);\n                let indexOfSecond = temparray[0].indexOf(searchTerm1,1);\n                let onlyWord = temparray[0].slice(indexOfFirst+ 1, indexOfSecond)\n\n                temparray[0] = onlyWord;\n\n                //grabs urls\n                const URLsearchTerm = '=';\n                let URLsearchTerm1 = \".jpg\";\n\n        \n       \n\n                let URLindexOfFirst = temparray[1].indexOf(URLsearchTerm);\n                let URLindexOfSecond = temparray[1].indexOf(URLsearchTerm1);\n                if(URLindexOfSecond === -1){\n                    URLindexOfSecond = temparray[1].indexOf('.png');\n                }\n                let onlyURL = temparray[1].slice(URLindexOfFirst+ 2, URLindexOfSecond+ 4)\n\n                temparray[1] = onlyURL;\n\n                URLindexOfFirst = temparray[2].indexOf(URLsearchTerm);\n                URLindexOfSecond = temparray[2].indexOf(URLsearchTerm1);\n                if(URLindexOfSecond === -1){\n                    URLindexOfSecond = temparray[2].indexOf('.png');\n                }\n                onlyURL = temparray[2].slice(URLindexOfFirst+ 2, URLindexOfSecond+ 4)\n\n                temparray[2] = onlyURL;\n                \n                URLindexOfFirst = temparray[3].indexOf(URLsearchTerm);\n                URLindexOfSecond = temparray[3].indexOf(URLsearchTerm1);\n                if(URLindexOfSecond === -1){\n                    URLindexOfSecond = temparray[3].indexOf('.png');\n                }\n                onlyURL = temparray[3].slice(URLindexOfFirst+ 2, URLindexOfSecond+ 4)\n\n                temparray[3] = onlyURL;\n                \n                URLindexOfFirst = temparray[4].indexOf(URLsearchTerm);\n                URLindexOfSecond = temparray[4].indexOf(URLsearchTerm1);\n                if(URLindexOfSecond === -1){\n                    URLindexOfSecond = temparray[4].indexOf('.png');\n                }\n                onlyURL = temparray[4].slice(URLindexOfFirst+ 2, URLindexOfSecond+ 4)\n\n                temparray[4] = onlyURL;\n\n                \n                let tempState = `${x}${i}`\n                this.setState({\n                    allSkins: {...this.state.allSkins, [tempState]: temparray}\n                  });\n                  if(Object.keys(this.state.allSkins).length >750){\n                          resolve();\n                  }\n                }\n\n\n            },\n           \n            (error) => {\n             console.log(error)\n            }\n          )\n        }\n    }\n    }\n        })\n    }\n\n    setGodName = (name) =>{\n        this.setState({\n            godName: name,\n            showGodSkins: true\n        })\n    }\n\n    goBack = () =>{\n        this.setState({\n            showGodSkins: false\n        })\n    }\n\n    filterSkinsToGods = () =>{\n        \n        Object.keys(this.state.gods).map((god, i) =>{\n            let arr = [];\n\n            Object.keys(this.state.allSkins).map((obj, i) => {\n                if(this.state.allSkins[obj][0].includes(god.god_name_EN)){\n                    //filteredData.push(this.props.allSkins[obj])\n                }\n            });\n\n        });\n\n       \n    }\n\npromise = () =>{\n    this.getAllUpdates()\n        .then(()=>{\n            this.sendSlug()\n            .then(() =>{\n                this.setState({\n                    skinsloaded: true\n                })\n            })\n        })\n}\n\n\n    render() {\n\n        return (\n            <Router>\n            <Switch>\n                \n            <div>\n            \n                {this.state.showGodSkins ?(\n                <Route path=\"/skins\">\n                    <div>\n                    <Skin allSkins={this.state.allSkins} godName={this.state.godName} goBack={this.goBack}/>\n                    </div>\n                </Route>):( this.state.gods && this.state.skinsloaded?(<Route path=\"/\"> <div >\n            \n                    <div>\n                    <h1 className=\"header\">Smite Card Art Wallpapers</h1>\n                    <div className=\"home\">\n                    {this.state.gods.map((god, i) =>(<Link to=\"skins\" key={god.id}><div onClick={()=> this.setGodName(god.name)} className=\"single-god\"  id={god.name.replace(/\\s/g, '')} >\n                            <div className='home-godcardart'>\n                            <img src={god.card.replace(/[']/g, '')} alt={god.name}/>\n                            </div>\n                            <div className='god-name'>\n                            <p onClick={()=> this.setGodName(god.name)}>{god.name}</p>\n                            </div>\n                   </div></Link> ))}\n                    </div>\n                    </div>\n                    </div></Route>): <h1 className=\"loading\">Loading...</h1>)}\n                    <footer className=\"footer\">\n                    <p>Smite Wallpapers By Tanner Shilson.</p>\n                    <p>Data &amp; Art provided by Hi-Rez Studios. © Hi-Rez Studios, Inc. All rights reserved.</p>\n                    </footer>\n            </div>\n            </Switch>\n            </Router>\n        )\n    }\n}","\nimport './App.css';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}